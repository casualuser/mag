// Generated by CoffeeScript 1.6.2
var Logger, exports, formats, hostname, istty, levelNames, levels, pid, slice, util;

istty = process.stdout.isTTY;

util = require('util');

slice = Array.prototype.slice;

pid = process.pid.toString();

hostname = require('os').hostname().replace(/\s+/g, '');

levels = {
  EMERGENCY: 0,
  emergency: 0,
  emerg: 0,
  panic: 0,
  ALERT: 1,
  alert: 1,
  CRITICAL: 2,
  critical: 2,
  crit: 2,
  ERROR: 3,
  error: 3,
  err: 3,
  WARNING: 4,
  warning: 4,
  warn: 4,
  NOTICE: 5,
  notice: 5,
  INFO: 6,
  info: 6,
  DEBUG: 7,
  debug: 7
};

levelNames = ['EMERGENCY', 'ALERT', 'CRITICAL', 'ERROR', 'WARNING', 'NOTICE', 'INFO', 'DEBUG'];

Logger = (function() {
  function Logger(tag) {
    this.tag = tag != null ? tag : '';
  }

  Logger.prototype._log = function(level, message) {
    var data;

    if (level <= exports.level) {
      data = {
        tag: this.tag,
        pid: pid,
        hostname: hostname,
        timestamp: new Date(),
        level: level,
        levelName: levelNames[level],
        message: util.format.apply(this, message)
      };
      return process.stdout.write(exports.format(data) + "\n");
    }
  };

  Logger.prototype.log = function(levelName) {
    var level;

    level = levels[levelName];
    return this._log(level, slice.call(arguments, 1));
  };

  Logger.prototype.emergency = function() {
    return this._log(0, arguments);
  };

  Logger.prototype.emerg = Logger.prototype.emergency;

  Logger.prototype.alert = function() {
    return this._log(1, arguments);
  };

  Logger.prototype.critical = function() {
    return this._log(2, arguments);
  };

  Logger.prototype.crit = Logger.prototype.critical;

  Logger.prototype.error = function() {
    return this._log(3, arguments);
  };

  Logger.prototype.err = Logger.prototype.error;

  Logger.prototype.warning = function() {
    return this._log(4, arguments);
  };

  Logger.prototype.warn = Logger.prototype.warning;

  Logger.prototype.notice = function() {
    return this._log(5, arguments);
  };

  Logger.prototype.info = function() {
    return this._log(6, arguments);
  };

  Logger.prototype.debug = function() {
    return this._log(7, arguments);
  };

  return Logger;

})();

module.exports = exports = function(tag, level) {
  if ('string' === typeof level) {
    level = levels[level.toUpperCase()];
  }
  if (level != null) {
    exports.level = level;
  }
  return new Logger(tag);
};

exports.level = levels.DEBUG;

exports.levels = levels;

exports.formats = formats = {
  console: function(data) {
    return "" + (data.timestamp.toLocaleTimeString()) + " " + data.hostname + " " + data.tag + "[" + data.pid + "]: <" + data.levelName + "> " + data.message;
  },
  file: function(data) {
    return JSON.stringify(data);
  },
  logstash: function(data) {
    return JSON.stringify({
      '@timestamp': data.timestamp,
      '@tags': [data.tag, data.pid, data.levelName],
      '@source': "" + data.hostname + " " + data.tag + "[" + data.pid + "]",
      '@message': data.message,
      '@fields': {
        level: data.level,
        levelName: data.levelName
      }
    });
  }
};

if (istty === true) {
  exports.format = formats.console;
} else {
  exports.format = formats.logstash;
}
